#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;
use utf8;

use FindBin;
use lib "$FindBin::Bin/lib";

use Mojolicious::Lite;
use Mojo::ByteStream 'b';
use Model::DB;
use Data::Dumper;

sub theme { Model::DB->get_site_config('theme'); }

sub utf8_decode { utf8::decode($_[0]); return $_[0]; }

ladder sub {
    my $self = shift;
    
    my $posts_per_page  = Model::DB->get_site_config('posts_per_page');
    my $template_dir    = app->home->rel_dir('themes');
    
    app->renderer->root($template_dir);
    plugin 'tt_renderer' => {
        'template_options' => {
            'INCLUDE_PATH' => app->renderer->root,
            'WRAPPER' => theme . '/index'
        }
    };
    
    $self->stash(
        'site_title' => utf8_decode(Model::DB->get_site_config('site_title')),
        'site_sub_title' => utf8_decode(Model::DB->get_site_config('site_sub_title')),
    );
};


get '/' => sub {
    my $self = shift;
    my $posts_per_page  = Model::DB->get_site_config('posts_per_page');
    
    $self->stash(
        'posts' => Model::DB->get_last_published_posts($posts_per_page),
    );
    
} => theme . '/home';

get '/posts/(id)' => sub {
    my $self    = shift;
    my $id      = $self->param('id') || 0;
    my $post    = Model::DB->get_post_by_id($id);
    
    if (exists $post->{'title'}) {
        $self->stash(
            'post' => $post
        );
    }
    else {
        $self->redirect_to('/not_found');
    }
} => theme . '/post';

get '/login' => sub {
    my $self = shift;
    
    $self->redirect_to('/') if $self->session('username');
} => theme . '/login';

post '/login' => sub {
    my $self = shift;
    my $user = $self->param('username') || '';
    my $pass = $self->param('password') || '';
    
    if ($user && $pass) {
        my $authors = Model::DB::Authors->select(
            'where username = ? and password = ?',
            $user,
            b($pass)->md5_sum
        );
        
        if (@$authors == 1) {
            delete $authors->[0]->{'password'};
            $self->session(%{$authors->[0]});
            
            return $self->redirect_to('/admin/posts');
        }
    }
    
    $self->stash('login_error' => 1);
} => theme . '/login';

get '/logout' => sub {
    my $self = shift;
    $self->session('expires' => 1);
    $self->redirect_to('/');
};


## Área administrativa
## Checa se o usuário está logado e redireciona se necessário
ladder sub {
    my $self = shift;
    
    if ($self->session('username')) {
        $self->stash(
            'site_title' => utf8_decode(Model::DB->get_site_config('site_title')),
            'site_sub_title' => utf8_decode(Model::DB->get_site_config('site_sub_title')),
        );
        
        return 1;
    }
    $self->redirect_to('/login') and return;
};

get '/admin/posts' => sub {
    my $self = shift;
    
    $self->stash(
        'posts' => Model::DB->get_post_list_ref(
            $self->session('username')
        )
    );
    
} => 'admin/post_list';

get '/admin/posts/new' => sub {
    my $self = shift;
} => 'admin/post_edit';

post '/admin/posts/edit' => sub {
    my $self = shift;
    
    my $post_id     = $self->param('post_id')           || '';
    my $author      = $self->session('username')        || 'poste';
    my $title       = $self->param('title')             || '';
    my $content     = $self->param('content')           || '';
    my $pub_date    = $self->param('pub_date')          || '';
    my $status      = $self->param('post_status')       || '1';
    
    if ($post_id) {
        Model::DB::Posts->delete('where post_id = ?', $post_id);
    }
    
    my $post = Model::DB::Posts->new(
        'author'        => $author,
        'publish_date'  => $pub_date,
        'title'         => utf8_decode($title),
        'content'       => utf8_decode($content),
        'status'        => $status,
        'post_id'       => $post_id,
    );
    
    delete $post->{'post_id'} unless $post_id;
    
    if ($post->insert) {
        $self->redirect_to('/posts/' . $post->{'post_id'});
    }
    else {
        $self->stash('post' => $post);
    }
} => 'admin/post_edit';

get '/admin/posts/edit/(id)' => sub {
    my $self = shift;
    
    $self->stash(
        'post'  => Model::DB->get_post_by_id($self->param('id'))
    );

} => 'admin/post_edit';

shagadelic;
